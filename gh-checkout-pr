#!/usr/bin/python3
import unicodedata
import argparse
import textwrap
from datetime import datetime
import re
import sys
import json
import os
import subprocess

prog_description = """\
Checkout to the selected PR

# To checkout to the PR with specified number.
gh checkout-pr \$number

# To checkout to the PR by searching name.
gh checkout-pr \$title
"""

RESET, RED, GREEN, MAGENTA = 0, 31, 32, 35
STATE_COLOR = {
    'MERGED': MAGENTA,
    'CLOSED': RED,
}
PR_LIST_TEMPLATE = '\x1b[31m({idx}) \x1b[{color}m{title} \x1b[0m#{number} ({timeago})'
PR_CONTENT_TEMPLATE = """
\x1b[1;{color}m{title} \x1b[0m(#{number})
{timeago}
  
{body}
"""


def parse_args():
    parser = argparse.ArgumentParser(description=prog_description)
    parser.add_argument('args', type=str, nargs='+', help='')
    parser.add_argument('--number', '-n', type=int, help='')
    parser.add_argument('--search', '-s', type=str, nargs='+', help='')
    args = parser.parse_args()
    if len(args.args) == 1 and str(args.args[0]).isdecimal():
        args.number = args.args[0]
    else:
        args.search = args.args
    return args


def display_len(text):
    text = re.sub(r"\x1b\[(\d*;)*(\d*)m", "", text)
    length = len(text)
    for char in text:
        if unicodedata.east_asian_width(char) in ['W', 'F']:
            length += 1
    return length

def print_pr_content(title, number, state, body, updatedAt, **kwargs):
    color = STATE_COLOR.get(state, GREEN)
    timeago = pretty_date(datetime.strptime(updatedAt, '%Y-%m-%dT%H:%M:%SZ'))
    lines = PR_CONTENT_TEMPLATE.format(color=color,
                                       number=number,
                                       title=title,
                                       timeago=timeago,
                                       body=body).split('\n')
    terminal_width = min(os.get_terminal_size().columns, 120)
    print('╭' + '─' * (terminal_width - 3) + '╮')
    for line in lines:
        wrapped_text = textwrap.wrap(line,
                                     width=terminal_width - 3,
                                     drop_whitespace=False)
        for text in wrapped_text:
            fill = terminal_width - 3 - display_len(text)
            print('│' + text + ' ' * fill + '│')
    print('╰' + '─' * (terminal_width - 3) + '╯')


def pretty_date(time: datetime):
    """
    Get a datetime object or a int() Epoch timestamp and return a
    pretty string like 'an hour ago', 'Yesterday', '3 months ago',
    'just now', etc
    """
    now = datetime.utcnow()
    diff = now - time
    second_diff = diff.seconds
    day_diff = diff.days

    if day_diff < 0:
        return ''

    if day_diff == 0:
        if second_diff < 10:
            return "刚刚"
        if second_diff < 60:
            return str(second_diff) + " 秒前"
        if second_diff < 3600:
            return str(second_diff // 60) + " 分钟前"
        if second_diff < 86400:
            return str(second_diff // 3600) + " 小时前"
    if day_diff < 7:
        return str(day_diff) + " 天前"
    if day_diff < 31:
        return str(day_diff // 7) + " 周前"
    if day_diff < 365:
        return str(day_diff // 30) + " 月前"
    return str(day_diff // 365) + " 年前"

def main():
    args = parse_args()
    if args.number is not None:
        pr_number = int(args.number)
        p = subprocess.Popen(
            ['gh', 'pr', 'view',
             str(pr_number), '--json', 'number,title,state,body,headRefName,updatedAt,headRepositoryOwner'],
            stdout=subprocess.PIPE,
        )
        pr_content = json.loads(p.stdout.read())
    elif args.search is not None:
        p = subprocess.Popen(
            [
                'gh', 'pr', 'list', '--search', 'in:title {}'.format(' '.join(
                    args.search)), '--json', 'number,title,state,body,headRefName,updatedAt,headRepositoryOwner',
                '--state', 'all'
            ],
            stdout=subprocess.PIPE,
        )
        pr_list = json.loads(p.stdout.read())
        if len(pr_list) == 0:
            print('Not found available PR.')
            sys.exit(1)
        for i, pr in enumerate(reversed(pr_list)):
            idx = len(pr_list) - i
            color = STATE_COLOR.get(pr['state'], GREEN)
            print(
                PR_LIST_TEMPLATE.format(
                    idx=idx,
                    color=color,
                    number=pr['number'],
                    title=pr['title'],
                    timeago=pretty_date(
                        datetime.strptime(pr['updatedAt'], '%Y-%m-%dT%H:%M:%SZ')),
                ))
        try:
            index = int(input("Please select the PR to checkout: ")) - 1
        except KeyboardInterrupt:
            return
        except ValueError:
            print('Invalid input.')
            return

        pr_content = pr_list[index]

    print_pr_content(**pr_content)

    confirm = str(input('\nCheckout to the branch? (Y / n)'))
    if confirm.lower() in ['y', '']:
        if pr_content['headRepositoryOwner']['login'] == 'mzr1996':
            branch_name = pr_content["headRefName"]
        else:
            branch_name = f'pr{pr_content["number"]}/{pr_content["headRefName"]}'
        subprocess.Popen(['gh', 'pr', 'checkout', str(pr_content['number']), '-b', branch_name]).communicate()


if __name__ == "__main__":
    main()
